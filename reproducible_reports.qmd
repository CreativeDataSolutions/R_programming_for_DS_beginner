---
title: Reproducible reports
author: Dmitry Grapov
date: "`r format(Sys.time(), '%B %d, %Y')`"
params:
  summarize_columns: TRUE
  report_data: 'mtcars'
---

# Reproducible reports

![DALLÂ·E 2023-04-12 21.10.39 - duck creating a reproducible report using the R programming language, colorful cartoon, solarpunk](imgs/reproducible_reports.png)

```{r,echo=FALSE}
knitr::opts_chunk$set(warning = FALSE,message = FALSE) # set global chunk options
```

```{r,echo=FALSE}
library(dplyr)
library(htmltools)
```

![](imgs/reproducible_reports1.png) All of the examples you have seen so far have used [`rmarkdown`](https://rmarkdown.rstudio.com/) and [`quarto`](https://quarto.org/) to combine text and `R` code into reproducible documents. This powerful combination offers many options to combine code and text, which can be rendered in different formats and typeset in custom layouts.

If you look at the source code of the examples you can see how [markdown](https://quarto.org/docs/authoring/markdown-basics.html) (text) and `R` code blocks have been combined. Next we will look at more examples of how we can seamlessly combine text and code, recreate data analysis results in different formats and create automated and `parameterized reports`.

## Code and text

Lets create some data objects in `R` and incorporate them directly into the text results.

```{r,echo=FALSE}
# data_name<-'mtcars'
data_name<-ifelse(is.null(params$report_data),'mtcars',params$report_data)
data<-get(data_name)

n_cars<-nrow(data)
n_vars<-ncol(data)

```

The `r data_name` data set contains `r n_vars` measurements for `r n_cars` samples.

In this example we have hidden the code which was used to create the text.

`code`

![](imgs/reproducible_reports2.png)

`text`

![](imgs/reproducible_reports3.png){style="border: 5px solid black;"}

We have also used [`css`](https://www.w3schools.com/howto/howto_css_border_image.asp) to style the the image of the results (add a black border).

We can use `R studio` UI to switch between different representations the code and rendered the final results in different formats. Change between `source` and `visual` representations in the top left corner.

![](imgs/reproducible_reports4.png)We can configure our report's [`front matter`](https://jekyllrb.com/docs/front-matter/) to define default options for a variety of output formats.

![](imgs/reproducible_reports5.png)

Their are many options we can specify for our report using the `front matter` code block at the beginning of our document which is designated using a modified [`yaml`](https://yaml.org/) format as follows.

    ---
    key1: key1_value1
      key1_child1: key1_child1_value
    key2: key2_value1
    ---

For example, try adding the following block with your custom definitions and render the report.

    ---
    title: Reproducible reports
    author: Best ever!
    date: "04/1/2023"
    ---

We can also execute custom `R` code in the `front matter`.

    ---
    title: Reproducible reports
    author: Your name goes here
    date: "`r format(Sys.time(), '%B %d, %Y')`"
    ---

## Parameterized reports

We can specify options for our code in the [`parameters`](https://quarto.org/docs/computations/parameters.html) block in the `front matter`. For example, we can optionally create a custom code and text block summary. We will add the `params` option to our document's `front matter`.

    params:
      summarize_columns: TRUE

The following sets the variable named `summarize_columns` to `TRUE` when we execute `R code` blocks, which we can use to dynamically modify our report.

```{r, results='asis',warning=FALSE}
if(exists('params') && params$summarize_columns){
  .text<-paste(colnames(get(data_name)),collapse=', ')
  .text<-paste('The data contains the following variables:\n',.text)
} else {
  
  .text<-tags$p('\U2717 Hello world, not unlocked.',style ="color: red;") %>%
    as.character()
  #Unicode Characters: https://www.w3schools.com/charsets/ref_utf_dingbats.asp
}

HTML(.text)
```

`Params` are useful to create custom reports. For example we can supply the parameters when rendering using command line arguments (run the flowing in the terminal).

    quarto render reproducible_reports.qmd -P summarize_columns:FALSE

To make this more interesting, lets make the data a changeable parameter.

    params:
      summarize_columns: TRUE
      report_data: 'mtcars'

We also need to modify how the data is scoped in our code on line `25`.

    data_name<-ifelse(is.null(params$report_data),get('mtcars'),get(params$report_data))

Now let's recreate the report for another data set.

    quarto render reproducible_reports.qmd -P report_data:'iris'

In practice this example could define the `file path` for the custom data which needs to be loaded and analyzed.

## Tables

There are many options for creating custom tables in `rmarkdown`. For example: [knitr](https://bookdown.org/yihui/rmarkdown-cookbook/kable.html), [formattable](https://renkun-ken.github.io/formattable/), and [DataTable](https://rstudio.github.io/DT/).

The choice of `library` depends on the output format and desired customization. The following are a few examples of what is possible.

### Simple

```{r}
.data<-head(data)
knitr::kable(.data, caption = "knitr::kable")

```

### Formatted

```{r}
library(formattable)

#create custom formats for column
formats <- list(color_tile("transparent", "lightpink"),color_bar("lightgreen")) %>%
  setNames(.,colnames(data)[1:2])

table1<-formattable(.data, formats,caption ='formattable')
table1

```

### Interactive

```{r}
library(DT)

datatable(.data, filter = 'top', options = list(
  pageLength = 5, autoWidth = TRUE
))

```

Note we can also convert a `formattable` to and interactive `DT` table using \``` as.datatable(<formattable>)` ``.

```{r}
as.datatable(table1,filter = 'top', options = list(
  pageLength = 5, autoWidth = TRUE
))
```

## Layouts

Quarto offers many [layout](https://quarto.org/docs/authoring/figures.html#figure-panels) options. The simplest control is based on the number of `columns` or `rows` we want the code results to fill. For example to create two figures side by side we can use the following.

    ::: {layout-ncol=2}
    <CODE>
    :::

::: {layout-ncol="2"}
```{r}
plot(data[,1])
```

```{r}
plot(data[,2])
```
:::

When using the `html` format for the report we have many other options like creating `tabsets`.

::: {.panel-tabset}
## Plot 1

```{r}
plot(data[,1])
```

## Plot 2

```{r}
plot(data[,2])
```
:::

## References

Next let's add references to our report. We can specify the bibliography in the `front matter` as follows. Note this variable can also be set for all documents in the `_quarto.yml`.

    bibliography: references.bib

The `.bib` [BibTex format](https://fileinfo.com/extension/bib#:~:text=A%20BIB%20file%20is%20a,TEX) can be created using various tools and looked up for any `R library` using `citation('library')`. For example lets add a citation for the `R` `base` library to our report.

```{r}
citation('base')
```

We can add the following entry to `referencec.bib`.

    @Manual{R,
        title = {R: A Language and Environment for Statistical Computing},
        author = {{R Core Team}},
        organization = {R Foundation for Statistical Computing},
        address = {Vienna, Austria},
        year = {2022},
        url = {https://www.R-project.org/},
      }

Now we can cite R using the following syntax `[@citation]`. We need to add an additional code block to define where the references should be rendered.

    ## References

    ::: {#refs}
    :::

The following report was created using [@R].

## Appendix

-   [Getting started with quarto](https://quarto.org/docs/get-started/)

## References

::: {#refs}
:::
